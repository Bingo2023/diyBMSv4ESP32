
/*
  ____  ____  _  _  ____  __  __  ___
 (  _ \(_  _)( \/ )(  _ \(  \/  )/ __)
  )(_) )_)(_  \  /  ) _ < )    ( \__ \
 (____/(____) (__) (____/(_/\/\_)(___/

DIYBMS V4.0
ESP8266 MODULE

(c)2019 Stuart Pittaway

COMPILE THIS CODE USING PLATFORM.IO

LICENSE
Attribution-NonCommercial-ShareAlike 2.0 UK: England & Wales (CC BY-NC-SA 2.0 UK)
https://creativecommons.org/licenses/by-nc-sa/2.0/uk/

* Non-Commercial — You may not use the material for commercial purposes.
* Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made.
  You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.
* ShareAlike — If you remix, transform, or build upon the material, you must distribute your   contributions under the same license as the original.
* No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.
*/

#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>
#include "FS.h"

#include <SPIFFS.h>
#include "time.h"

#include "defines.h"
#include "DIYBMSServer.h"
#include "EmbeddedFiles_AutoGenerated.h"
#include "EmbeddedFiles_Integrity.h"

#include "settings.h"

#include "FS.h"
#include <LITTLEFS.h>
#include "SD.h"

#include "SoftAP.h"

AsyncWebServer *DIYBMSServer::_myserver;
String DIYBMSServer::UUIDString;
String DIYBMSServer::UUIDStringLast2Chars;

fs::SDFS *DIYBMSServer::_sdcard = 0;
void (*DIYBMSServer::_sdcardaction_callback)(uint8_t action) = 0;
PacketRequestGenerator *DIYBMSServer::_prg = 0;
PacketReceiveProcessor *DIYBMSServer::_receiveProc = 0;
diybms_eeprom_settings *DIYBMSServer::_mysettings = 0;
Rules *DIYBMSServer::_rules = 0;
ControllerState *DIYBMSServer::_controlState = 0;
HAL_ESP32 *DIYBMSServer::_hal = 0;

#define REBOOT_COUNT_DOWN 2000

String DIYBMSServer::uuidToString(uint8_t *uuidLocation)
{
  const char hexchars[] = "0123456789abcdef";
  String string = "";
  int i;
  for (i = 0; i < 16; i++)
  {
    if (i == 4)
      string += "-";
    if (i == 6)
      string += "-";
    if (i == 8)
      string += "-";
    if (i == 10)
      string += "-";
    uint8_t topDigit = uuidLocation[i] >> 4;
    uint8_t bottomDigit = uuidLocation[i] & 0x0f;
    // High hex digit
    string += hexchars[topDigit];
    // Low hex digit
    string += hexchars[bottomDigit];
  }

  return string;
}

void DIYBMSServer::generateUUID()
{
  uint8_t uuidNumber[16]; // UUIDs in binary form are 16 bytes long

  //ESP32 has inbuilt random number generator
  //https://techtutorialsx.com/2017/12/22/esp32-arduino-random-number-generation/
  for (uint8_t x = 0; x < 16; x++)
  {
    uuidNumber[x] = random(0xFF);
  }

  UUIDString = uuidToString(uuidNumber);

  //481efb3f-0400-0000-101f-fb3fd01efb3f
  UUIDStringLast2Chars = UUIDString.substring(34);
}

bool DIYBMSServer::validateXSS(AsyncWebServerRequest *request)
{
  if (request->hasHeader("Cookie"))
  {
    AsyncWebHeader *cookie = request->getHeader("Cookie");
    if (cookie->value().startsWith("DIYBMS_XSS="))
    {
      if (cookie->value().substring(11).equals(DIYBMSServer::UUIDString))
      {
        if (request->hasParam("xss", true))
        {
          AsyncWebParameter *p1 = request->getParam("xss", true);

          if (p1->value().equals(DIYBMSServer::UUIDString) == true)
          {
            return true;
          }
        }
      }
    }
  }
  request->send(500, "text/plain", "XSS invalid");
  return false;
}


void DIYBMSServer::SendFailure(AsyncWebServerRequest *request)
{
  request->send(500, "text/plain", "Failed");
}

void DIYBMSServer::saveConfigurationToSDCard(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (!_sd_card_installed)
  {
    SendFailure(request);
    return;
  }

  if (_hal->GetVSPIMutex())
  {

    struct tm timeinfo;

    //getLocalTime has delay() functions in it :-(
    if (getLocalTime(&timeinfo, 1))
    {
      timeinfo.tm_year += 1900;
      //Month is 0 to 11 based!
      timeinfo.tm_mon++;
    }
    else
    {
      memset(&timeinfo, 0, sizeof(tm));
    }

    char filename[128];
    sprintf(filename, "/backup_config_%04u%02u%02u_%02u%02u%02u.json", timeinfo.tm_year, timeinfo.tm_mon, timeinfo.tm_mday, timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);

    //ESP_LOGI(TAG, "Creating folder");
    //_sdcard->mkdir("/diybms");

    //Get the file
    ESP_LOGI(TAG, "Generating SD file %s", filename);

    if (_sdcard->exists(filename))
    {
      ESP_LOGI(TAG, "Delete existing file %s", filename);
      _sdcard->remove(filename);
    }

    StaticJsonDocument<4096> doc;

    //This code builds up a JSON document which mirrors the structure "diybms_eeprom_settings"
    JsonObject root = doc.createNestedObject("diybms_settings");

    root["totalNumberOfBanks"] = _mysettings->totalNumberOfBanks;
    root["totalNumberOfSeriesModules"] = _mysettings->totalNumberOfSeriesModules;
    root["baudRate"] = _mysettings->baudRate;

    root["graph_voltagehigh"] = _mysettings->graph_voltagehigh;
    root["graph_voltagelow"] = _mysettings->graph_voltagelow;

    root["BypassOverTempShutdown"] = _mysettings->BypassOverTempShutdown;
    root["BypassThresholdmV"] = _mysettings->BypassThresholdmV;

    root["timeZone"] = _mysettings->timeZone;
    root["minutesTimeZone"] = _mysettings->minutesTimeZone;
    root["daylight"] = _mysettings->daylight;
    root["ntpServer"] = _mysettings->ntpServer;

    root["loggingEnabled"] = _mysettings->loggingEnabled;
    root["loggingFrequencySeconds"] = _mysettings->loggingFrequencySeconds;

    root["currentMonitoringEnabled"] = _mysettings->currentMonitoringEnabled;
    root["currentMonitoringModBusAddress"] = _mysettings->currentMonitoringModBusAddress;

    root["rs485baudrate"] = _mysettings->rs485baudrate;
    root["rs485databits"] = _mysettings->rs485databits;
    root["rs485parity"] = _mysettings->rs485parity;
    root["rs485stopbits"] = _mysettings->rs485stopbits;

    root["language"] = _mysettings->language;

    root["VictronEnabled"] = _mysettings->VictronEnabled;

    JsonObject mqtt = root.createNestedObject("mqtt");
    mqtt["enabled"] = _mysettings->mqtt_enabled;
    mqtt["port"] = _mysettings->mqtt_port;
    mqtt["server"] = _mysettings->mqtt_server;
    mqtt["topic"] = _mysettings->mqtt_topic;
    mqtt["username"] = _mysettings->mqtt_username;
    mqtt["password"] = _mysettings->mqtt_password;

    JsonObject influxdb = root.createNestedObject("influxdb");
    influxdb["enabled"] = _mysettings->influxdb_enabled;
    influxdb["apitoken"] = _mysettings->influxdb_apitoken;
    influxdb["bucket"] = _mysettings->influxdb_databasebucket;
    influxdb["org"] = _mysettings->influxdb_orgid;
    influxdb["url"] = _mysettings->influxdb_serverurl;

    JsonObject outputs = root.createNestedObject("outputs");

    JsonArray d = outputs.createNestedArray("default");
    JsonArray t = outputs.createNestedArray("type");
    for (uint8_t i = 0; i < RELAY_TOTAL; i++)
    {
      d.add(_mysettings->rulerelaydefault[i]);
      t.add(_mysettings->relaytype[i]);
    }

    JsonObject rules = root.createNestedObject("rules");
    for (uint8_t rr = 0; rr < RELAY_RULES; rr++)
    {
      String elementName = String("rule") + String(rr);

      //Map enum to string so when this file is re-imported we are not locked to specific index offsets
      //which may no longer map to the correct rule
      switch (rr)
      {
      case Rule::EmergencyStop:
        elementName = String("EmergencyStop");
        break;
      case Rule::BMSError:
        elementName = String("BMSError");
        break;
      case Rule::CurrentMonitorOverCurrentAmps:
        elementName = String("CurrentMonitorOverCurrentAmps");
        break;
      case Rule::ModuleOverVoltage:
        elementName = String("ModuleOverVoltage");
        break;
      case Rule::ModuleUnderVoltage:
        elementName = String("ModuleUnderVoltage");
        break;
      case Rule::ModuleOverTemperatureInternal:
        elementName = String("ModuleOverTemperatureInternal");
        break;
      case Rule::ModuleUnderTemperatureInternal:
        elementName = String("ModuleUnderTemperatureInternal");
        break;
      case Rule::ModuleOverTemperatureExternal:
        elementName = String("ModuleOverTemperatureExternal");
        break;
      case Rule::ModuleUnderTemperatureExternal:
        elementName = String("ModuleUnderTemperatureExternal");
        break;
      case Rule::CurrentMonitorOverVoltage:
        elementName = String("CurrentMonitorOverVoltage");
        break;
      case Rule::CurrentMonitorUnderVoltage:
        elementName = String("CurrentMonitorUnderVoltage");
        break;
      case Rule::BankOverVoltage:
        elementName = String("BankOverVoltage");
        break;
      case Rule::BankUnderVoltage:
        elementName = String("BankUnderVoltage");
        break;
      case Rule::Timer2:
        elementName = String("Timer2");
        break;
      case Rule::Timer1:
        elementName = String("Timer1");
        break;
      }

      JsonObject state = rules.createNestedObject(elementName);

      state["value"] = _mysettings->rulevalue[rr];
      state["hysteresis"] = _mysettings->rulehysteresis[rr];

      JsonArray relaystate = state.createNestedArray("state");
      for (uint8_t rt = 0; rt < RELAY_TOTAL; rt++)
      {
        relaystate.add(_mysettings->rulerelaystate[rr][rt]);
      }
    } //end for

    JsonObject victron = root.createNestedObject("victron");
    JsonArray cvl = victron.createNestedArray("cvl");
    JsonArray ccl = victron.createNestedArray("ccl");
    JsonArray dcl = victron.createNestedArray("dcl");
    for (uint8_t i = 0; i < 3; i++)
    {
      cvl.add(_mysettings->cvl[i]);
      ccl.add(_mysettings->ccl[i]);
      dcl.add(_mysettings->dcl[i]);
    }

    /*
struct diybms_eeprom_settings
{
  //Use a bit pattern to indicate the relay states
  RelayState rulerelaystate[RELAY_RULES][RELAY_TOTAL];
};
*/

    //wifi["password"] = DIYBMSSoftAP::Config()->wifi_passphrase;

    File file = _sdcard->open(filename, "w");
    serializeJson(doc, file);
    file.close();

    _hal->ReleaseVSPIMutex();
  }

  SendSuccess(request);
}

void DIYBMSServer::saveWifiConfigToSDCard(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (!_sd_card_installed)
  {
    SendFailure(request);
    return;
  }

  if (_hal->GetVSPIMutex())
  {
    const char *wificonfigfilename = "/diybms/wifi.json";

    ESP_LOGI(TAG, "Creating folder");
    _sdcard->mkdir("/diybms");

    //Get the file
    ESP_LOGI(TAG, "Generating SD file %s", wificonfigfilename);
    StaticJsonDocument<1024> doc;

    JsonObject wifi = doc.createNestedObject("wifi");
    wifi["ssid"] = DIYBMSSoftAP::Config()->wifi_ssid;
    wifi["password"] = DIYBMSSoftAP::Config()->wifi_passphrase;

    if (_sdcard->exists(wificonfigfilename))
    {
      ESP_LOGI(TAG, "Delete existing file %s", wificonfigfilename);
      _sdcard->remove(wificonfigfilename);
    }

    File file = _sdcard->open(wificonfigfilename, "w");
    serializeJson(doc, file);
    file.close();

    _hal->ReleaseVSPIMutex();
  }

  SendSuccess(request);
}

void DIYBMSServer::avrProgrammer(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  uint16_t filenumber;

  if (request->hasParam("file", true))
  {
    AsyncWebParameter *filenumberparam = request->getParam("file", true);
    filenumber = filenumberparam->value().toInt();
  }
  else
  {
    SendFailure(request);
    return;
  }

  AsyncResponseStream *response = request->beginResponseStream("application/json");
  StaticJsonDocument<500> doc;

  if (_sd_card_installed)
  {
    doc["message"] = "Failed: Unable to program AVR whilst SD Card is mounted";
    serializeJson(doc, *response);
    request->send(response);
    return;
  }

  if (!_avrsettings.programmingModeEnabled)
  {
    doc["message"] = "Failed: Programming mode not enabled";
    serializeJson(doc, *response);
    request->send(response);
    return;
  }

  String manifestfilename = String("/avr/manifest.json");

  if (LITTLEFS.exists(manifestfilename))
  {
    StaticJsonDocument<3000> jsonmanifest;
    File file = LITTLEFS.open(manifestfilename);
    DeserializationError error = deserializeJson(jsonmanifest, file);
    if (error != DeserializationError::Ok)
    {
      ESP_LOGE(TAG, "Error deserialize Json");
      SendFailure(request);
      return;
    }
    else
    {
      // File open
      //ESP_LOGI(TAG, "Loaded manifest.json");

      JsonArray toplevel = jsonmanifest["avrprog"];

      int arraySize = jsonmanifest["avrprog"].size();

      if (filenumber > arraySize)
      {
        ESP_LOGE(TAG, "Index outsize array %i > %i", filenumber, arraySize);
        SendFailure(request);
        return;
      }

      JsonObject x = toplevel[filenumber];

      //serializeJsonPretty(x, SERIAL_DEBUG);

      _avrsettings.efuse = strtoul(x["efuse"].as<String>().c_str(), nullptr, 16);
      _avrsettings.hfuse = strtoul(x["hfuse"].as<String>().c_str(), nullptr, 16);
      _avrsettings.lfuse = strtoul(x["lfuse"].as<String>().c_str(), nullptr, 16);
      _avrsettings.mcu = strtoul(x["mcu"].as<String>().c_str(), nullptr, 16);

      String avrfilename = String("/avr/") + x["name"].as<String>();

      avrfilename.toCharArray(_avrsettings.filename, sizeof(_avrsettings.filename));
    }
    file.close();

    _avrsettings.progresult = 0xFF;
    _avrsettings.inProgress = true;

    //Fire task to start the AVR programming
    xTaskNotify(avrprog_task_handle, 0x00, eNotifyAction::eNoAction);
  }
  else
  {
    //No files!
    SendFailure(request);
    return;
  }

  doc["started"] = 1;
  doc["message"] = "Started";

  serializeJson(doc, *response);
  request->send(response);
}


void DIYBMSServer::enableAVRprog(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  (*DIYBMSServer::_sdcardaction_callback)(0);

  _avrsettings.programmingModeEnabled = true;

  SendSuccess(request);
}

void DIYBMSServer::disableAVRprog(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  _avrsettings.programmingModeEnabled = false;

  //Try and remount the SD card
  (*DIYBMSServer::_sdcardaction_callback)(1);

  SendSuccess(request);
}

void DIYBMSServer::sdMount(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (_avrsettings.programmingModeEnabled)
  {
    SendFailure(request);
  }
  else
  {

    (*DIYBMSServer::_sdcardaction_callback)(1);

    SendSuccess(request);
  }
}
void DIYBMSServer::sdUnmount(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (_avrsettings.programmingModeEnabled)
  {
    SendFailure(request);
  }
  else
  {
    (*DIYBMSServer::_sdcardaction_callback)(0);

    SendSuccess(request);
  }
}

void DIYBMSServer::resetCounters(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;


  //Ask modules to reset bad packet counters
 // If this fails, queue could be full so return error
  if (_prg->sendBadPacketCounterReset() && _prg->sendResetBalanceCurrentCounter())
  {  

  canbus_messages_failed_sent = 0;
  canbus_messages_received = 0;
  canbus_messages_sent = 0;

  for (uint8_t i = 0; i < maximum_controller_cell_modules; i++)
  {
    cmi[i].badPacketCount = 0;
    cmi[i].PacketReceivedCount = 0;
  }

  //Reset internal counters on CONTROLLER
  _receiveProc->ResetCounters();
  _prg->ResetCounters();

  SendSuccess(request);
  } else {
    SendFailure(request);
  }
}

void DIYBMSServer::saveDisplaySetting(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (request->hasParam("VoltageHigh", true))
  {
    AsyncWebParameter *p1 = request->getParam("VoltageHigh", true);
    _mysettings->graph_voltagehigh = p1->value().toFloat();
  }

  if (request->hasParam("VoltageLow", true))
  {
    AsyncWebParameter *p1 = request->getParam("VoltageLow", true);
    _mysettings->graph_voltagelow = p1->value().toFloat();
  }

  //Validate high is greater than low
  if (_mysettings->graph_voltagelow > _mysettings->graph_voltagehigh)
  {
    _mysettings->graph_voltagelow = 0;
  }

  if (request->hasParam("Language", true))
  {
    AsyncWebParameter *p1 = request->getParam("Language", true);
    p1->value().toCharArray(_mysettings->language, sizeof(_mysettings->language));
  }

  saveConfiguration();

  SendSuccess(request);
}

void DIYBMSServer::saveInfluxDBSetting(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (request->hasParam("influxEnabled", true))
  {
    AsyncWebParameter *p1 = request->getParam("influxEnabled", true);
    _mysettings->influxdb_enabled = p1->value().equals("on") ? true : false;
  }
  else
  {
    _mysettings->influxdb_enabled = false;
  }

  if (request->hasParam("influxUrl", true))
  {
    AsyncWebParameter *p1 = request->getParam("influxUrl", true);
    p1->value().toCharArray(_mysettings->influxdb_serverurl, sizeof(_mysettings->influxdb_serverurl));
  }

  if (request->hasParam("influxDatabase", true))
  {
    AsyncWebParameter *p1 = request->getParam("influxDatabase", true);
    p1->value().toCharArray(_mysettings->influxdb_databasebucket, sizeof(_mysettings->influxdb_databasebucket));
  }

  if (request->hasParam("influxOrgId", true))
  {
    AsyncWebParameter *p1 = request->getParam("influxOrgId", true);
    p1->value().toCharArray(_mysettings->influxdb_orgid, sizeof(_mysettings->influxdb_orgid));
  }

  if (request->hasParam("influxToken", true))
  {
    AsyncWebParameter *p1 = request->getParam("influxToken", true);
    p1->value().toCharArray(_mysettings->influxdb_apitoken, sizeof(_mysettings->influxdb_apitoken));
  }

  saveConfiguration();

  //ConfigHasChanged = REBOOT_COUNT_DOWN;
  SendSuccess(request);
}


void DIYBMSServer::saveVictron(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (request->hasParam("VictronEnabled", true))
  {
    AsyncWebParameter *p1 = request->getParam("VictronEnabled", true);
    _mysettings->VictronEnabled = p1->value().equals("on") ? true : false;
  }
  else
  {
    _mysettings->VictronEnabled = false;
  }

  for (int i = 0; i < 3; i++)
  {
    String name = "cvl";
    name = name + i;
    if (request->hasParam(name.c_str(), true, false))
    {
      AsyncWebParameter *p1 = request->getParam(name.c_str(), true, false);
      _mysettings->cvl[i] = p1->value().toFloat() * 10;
    }

    name = "ccl";
    name = name + i;
    if (request->hasParam(name.c_str(), true, false))
    {
      AsyncWebParameter *p1 = request->getParam(name.c_str(), true, false);
      _mysettings->ccl[i] = p1->value().toFloat() * 10;
    }

    name = "dcl";
    name = name + i;
    if (request->hasParam(name.c_str(), true, false))
    {
      AsyncWebParameter *p1 = request->getParam(name.c_str(), true, false);
      _mysettings->dcl[i] = p1->value().toFloat() * 10;
    }
  }

  saveConfiguration();

  SendSuccess(request);
}

void DIYBMSServer::saveCurrentMonRelay(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  currentmonitoring_struct newvalues;
  //Set everything to zero/false
  memset(&newvalues, 0, sizeof(currentmonitoring_struct));

  if (request->hasParam("TempCompEnabled", true))
  {
    AsyncWebParameter *p1 = request->getParam("TempCompEnabled", true);
    newvalues.TempCompEnabled = p1->value().equals("on") ? true : false;
  }
  else
  {
    newvalues.TempCompEnabled = false;
  }

  if (request->hasParam("cmTMPOL", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmTMPOL", true);
    newvalues.RelayTriggerTemperatureOverLimit = p1->value().equals("on") ? true : false;
  }
  if (request->hasParam("cmCURROL", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmCURROL", true);
    newvalues.RelayTriggerCurrentOverLimit = p1->value().equals("on") ? true : false;
  }
  if (request->hasParam("cmCURRUL", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmCURRUL", true);
    newvalues.RelayTriggerCurrentUnderLimit = p1->value().equals("on") ? true : false;
  }
  if (request->hasParam("cmVOLTOL", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmVOLTOL", true);
    newvalues.RelayTriggerVoltageOverlimit = p1->value().equals("on") ? true : false;
  }
  if (request->hasParam("cmVOLTUL", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmVOLTUL", true);
    newvalues.RelayTriggerVoltageUnderlimit = p1->value().equals("on") ? true : false;
  }
  if (request->hasParam("cmPOL", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmPOL", true);
    newvalues.RelayTriggerPowerOverLimit = p1->value().equals("on") ? true : false;
  }

  CurrentMonitorSetRelaySettings(newvalues);

  SendSuccess(request);
}
void DIYBMSServer::saveCurrentMonAdvanced(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  currentmonitoring_struct newvalues;
  //Set everything to zero/false
  memset(&newvalues, 0, sizeof(currentmonitoring_struct));

  if (request->hasParam("cmcalibration", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmcalibration", true);
    newvalues.modbus.shuntcal = p1->value().toInt();
  }
  if (request->hasParam("cmtemplimit", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmtemplimit", true);
    newvalues.modbus.temperaturelimit = (int16_t)(p1->value().toInt());
  }
  if (request->hasParam("cmundervlimit", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmundervlimit", true);
    newvalues.modbus.undervoltagelimit = p1->value().toFloat();
  }
  if (request->hasParam("cmovervlimit", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmovervlimit", true);
    newvalues.modbus.overvoltagelimit = p1->value().toFloat();
  }
  if (request->hasParam("cmoverclimit", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmoverclimit", true);
    newvalues.modbus.overcurrentlimit = p1->value().toFloat();
  }
  if (request->hasParam("cmunderclimit", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmunderclimit", true);
    newvalues.modbus.undercurrentlimit = p1->value().toFloat();
  }
  if (request->hasParam("cmoverplimit", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmoverplimit", true);
    newvalues.modbus.overpowerlimit = p1->value().toFloat();
  }
  if (request->hasParam("cmtempcoeff", true))
  {
    AsyncWebParameter *p1 = request->getParam("cmtempcoeff", true);
    newvalues.modbus.shunttempcoefficient = p1->value().toInt();
  }

  CurrentMonitorSetAdvancedSettings(newvalues);

  SendSuccess(request);
}

void DIYBMSServer::saveCurrentMonBasic(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (request->hasParam("shuntmaxcur", true) && request->hasParam("shuntmv", true) && request->hasParam("cmbatterycapacity", true) && request->hasParam("cmfullchargevolt", true) && request->hasParam("cmtailcurrent", true) && request->hasParam("cmchargeefficiency", true))
  {
    AsyncWebParameter *p1 = request->getParam("shuntmaxcur", true);
    int shuntmaxcur = p1->value().toInt();

    AsyncWebParameter *p2 = request->getParam("shuntmv", true);
    int shuntmv = p2->value().toInt();

    AsyncWebParameter *p3 = request->getParam("cmbatterycapacity", true);
    uint16_t batterycapacity = (uint16_t)(p3->value().toInt());

    AsyncWebParameter *p4 = request->getParam("cmfullchargevolt", true);
    float fullchargevolt = p4->value().toFloat();

    AsyncWebParameter *p5 = request->getParam("cmtailcurrent", true);
    float tailcurrent = p5->value().toFloat();

    AsyncWebParameter *p6 = request->getParam("cmchargeefficiency", true);
    float chargeefficiency = p6->value().toFloat();

    CurrentMonitorSetBasicSettings(shuntmv, shuntmaxcur, batterycapacity, fullchargevolt, tailcurrent, chargeefficiency);
  }

  SendSuccess(request);
}

void DIYBMSServer::saveCurrentMonSettings(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (request->hasParam("CurrentMonEnabled", true))
  {
    AsyncWebParameter *p1 = request->getParam("CurrentMonEnabled", true);
    _mysettings->currentMonitoringEnabled = p1->value().equals("on") ? true : false;
  }
  else
  {
    //If the parameter isn't there its FALSE/unchecked
    _mysettings->currentMonitoringEnabled = false;
  }

  if (request->hasParam("modbusAddress", true))
  {
    AsyncWebParameter *p1 = request->getParam("modbusAddress", true);
    _mysettings->currentMonitoringModBusAddress = p1->value().toInt();
  }

  if (_mysettings->currentMonitoringEnabled == false)
  {
    //Switch off current monitor, clear out the values
    memset(&currentMonitor, 0, sizeof(currentmonitoring_struct));
    currentMonitor.validReadings = false;
  }

  saveConfiguration();

  SendSuccess(request);
}

void DIYBMSServer::saveRS485Settings(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (request->hasParam("rs485baudrate", true))
  {
    AsyncWebParameter *p1 = request->getParam("rs485baudrate", true);
    _mysettings->rs485baudrate = p1->value().toInt();
  }

  if (request->hasParam("rs485databit", true))
  {
    AsyncWebParameter *p1 = request->getParam("rs485databit", true);
    _mysettings->rs485databits = (uart_word_length_t)(p1->value().toInt());
  }

  if (request->hasParam("rs485parity", true))
  {
    AsyncWebParameter *p1 = request->getParam("rs485parity", true);
    _mysettings->rs485parity = (uart_parity_t)(p1->value().toInt());
  }

  if (request->hasParam("rs485stopbit", true))
  {
    AsyncWebParameter *p1 = request->getParam("rs485stopbit", true);
    _mysettings->rs485stopbits = (uart_stop_bits_t)(p1->value().toInt());
  }

  saveConfiguration();

  ConfigureRS485();
  SendSuccess(request);
}

void DIYBMSServer::saveRuleConfiguration(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  //relaytype
  for (int i = 0; i < RELAY_TOTAL; i++)
  {
    String name = "relaytype";
    name = name + (i + 1);
    if (request->hasParam(name.c_str(), true, false))
    {
      AsyncWebParameter *p1 = request->getParam(name.c_str(), true, false);
      //Default
      RelayType oldValue = _mysettings->relaytype[i];
      if (p1->value().equals("Pulse"))
      {
        _mysettings->relaytype[i] = RelayType::RELAY_PULSE;
      }
      else
      {
        _mysettings->relaytype[i] = RelayType::RELAY_STANDARD;
      }

      if (oldValue != _mysettings->relaytype[i])
      {
        //The type of relay has changed - we probably need to reset something here
        ESP_LOGI(TAG, "Type of relay has changed");
        previousRelayState[i] = RelayState::RELAY_X;
      }
    }
  }

  //Relay default
  for (int i = 0; i < RELAY_TOTAL; i++)
  {
    String name = "defaultrelay";
    name = name + (i + 1);
    if (request->hasParam(name.c_str(), true, false))
    {
      AsyncWebParameter *p1 = request->getParam(name.c_str(), true, false);
      //Default
      _mysettings->rulerelaydefault[i] = RelayState::RELAY_OFF;
      if (p1->value().equals("On"))
      {
        _mysettings->rulerelaydefault[i] = RelayState::RELAY_ON;
      }
    }
  }

  for (int rule = 0; rule < RELAY_RULES; rule++)
  {

    //TODO: This STRING doesnt work properly if its on a single line!
    String name = "rule";
    name = name + (rule);
    name = name + "value";

    if (request->hasParam(name, true))
    {
      AsyncWebParameter *p1 = request->getParam(name, true);
      _mysettings->rulevalue[rule] = p1->value().toInt();
    }

    //TODO: This STRING doesnt work properly if its on a single line!
    String hname = "rule";
    hname = hname + (rule);
    hname = hname + "hysteresis";
    if (request->hasParam(hname, true))
    {
      AsyncWebParameter *p1 = request->getParam(hname, true);
      _mysettings->rulehysteresis[rule] = p1->value().toInt();
    }

    //Rule/relay processing
    for (int i = 0; i < RELAY_TOTAL; i++)
    {
      //TODO: This STRING doesnt work properly if its on a single line!
      String name = "rule";
      name = name + (rule);
      name = name + "relay";
      name = name + (i + 1);
      if (request->hasParam(name, true))
      {
        AsyncWebParameter *p1 = request->getParam(name, true);
        _mysettings->rulerelaystate[rule][i] = p1->value().equals("X") ? RELAY_X : p1->value().equals("On") ? RelayState::RELAY_ON
                                                                                                            : RelayState::RELAY_OFF;
      }
    }

    //Reset state of rules after updating the new values
    for (int8_t r = 0; r < RELAY_RULES; r++)
    {
      _rules->rule_outcome[r] = false;
    }
  }

  saveConfiguration();

  SendSuccess(request);
}

void DIYBMSServer::saveStorage(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (request->hasParam("loggingEnabled", true))
  {
    AsyncWebParameter *p1 = request->getParam("loggingEnabled", true);
    _mysettings->loggingEnabled = p1->value().equals("on") ? true : false;
  }
  else
  {
    //Switch off logging
    _mysettings->loggingEnabled = false;
  }

  if (request->hasParam("loggingFreq", true))
  {
    AsyncWebParameter *p1 = request->getParam("loggingFreq", true);
    _mysettings->loggingFrequencySeconds = p1->value().toInt();
    //Validate
    if (_mysettings->loggingFrequencySeconds < 15 || _mysettings->loggingFrequencySeconds > 600)
    {
      _mysettings->loggingFrequencySeconds = 15;
    }
  }

  saveConfiguration();

  SendSuccess(request);
}

void DIYBMSServer::saveNTP(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (request->hasParam("NTPServer", true))
  {
    AsyncWebParameter *p1 = request->getParam("NTPServer", true);
    p1->value().toCharArray(_mysettings->ntpServer, sizeof(_mysettings->ntpServer));
  }

  if (request->hasParam("NTPZoneHour", true))
  {
    AsyncWebParameter *p1 = request->getParam("NTPZoneHour", true);
    _mysettings->timeZone = p1->value().toInt();
  }

  if (request->hasParam("NTPZoneMin", true))
  {
    AsyncWebParameter *p1 = request->getParam("NTPZoneMin", true);
    _mysettings->minutesTimeZone = p1->value().toInt();
  }

  _mysettings->daylight = false;
  if (request->hasParam("NTPDST", true))
  {
    AsyncWebParameter *p1 = request->getParam("NTPDST", true);
    _mysettings->daylight = p1->value().equals("on") ? true : false;
  }
  else
  {
    _mysettings->daylight = false;
  }

  saveConfiguration();

  //ConfigHasChanged = REBOOT_COUNT_DOWN;
  SendSuccess(request);
}







void DIYBMSServer::handleNotFound(AsyncWebServerRequest *request)
{
  request->send(404, "text/plain", "Not found");
}

void DIYBMSServer::saveSetting(AsyncWebServerRequest *request)
{
  if (!validateXSS(request))
    return;

  if (request->hasParam("m", true))
  {
    AsyncWebParameter *module = request->getParam("m", true);
    //Will this overflow?
    uint8_t m = module->value().toInt();

    if (m > maximum_controller_cell_modules)
    {
      request->send(500, "text/plain", "Wrong parameters");
    }
    else
    {

      uint8_t BypassOverTempShutdown = 0xFF;
      uint16_t BypassThresholdmV = 0xFFFF;

      // Resistance of bypass load
      //float LoadResistance = 0xFFFF;
      //Voltage Calibration
      float Calibration = 0xFFFF;
      //Reference voltage (millivolt) normally 2.00mV
      //float mVPerADC = 0xFFFF;
      //Internal Thermistor settings
      //uint16_t Internal_BCoefficient = 0xFFFF;
      //External Thermistor settings
      //uint16_t External_BCoefficient = 0xFFFF;

      if (request->hasParam("BypassOverTempShutdown", true))
      {
        AsyncWebParameter *p1 = request->getParam("BypassOverTempShutdown", true);
        BypassOverTempShutdown = p1->value().toInt();
      }

      if (request->hasParam("BypassThresholdmV", true))
      {
        AsyncWebParameter *p1 = request->getParam("BypassThresholdmV", true);
        BypassThresholdmV = p1->value().toInt();
      }
      if (request->hasParam("Calib", true))
      {
        AsyncWebParameter *p1 = request->getParam("Calib", true);
        Calibration = p1->value().toFloat();
      }

      _prg->sendSaveSetting(m, BypassThresholdmV, BypassOverTempShutdown, Calibration);

      clearModuleValues(m);

      SendSuccess(request);
    }
  }
  else
  {
    request->send(500, "text/plain", "Missing parameters");
  }
}

void DIYBMSServer::clearModuleValues(uint8_t module)
{
  cmi[module].valid = false;
  cmi[module].voltagemV = 0;
  cmi[module].voltagemVMin = 6000;
  cmi[module].voltagemVMax = 0;
  cmi[module].badPacketCount = 0;
  cmi[module].inBypass = false;
  cmi[module].bypassOverTemp = false;
  cmi[module].internalTemp = -40;
  cmi[module].externalTemp = -40;
}










void DIYBMSServer::identifyModule(AsyncWebServerRequest *request)
{
  if (request->hasParam("c", false))
  {
    AsyncWebParameter *cellid = request->getParam("c", false);
    uint8_t c = cellid->value().toInt();

    if (c > _mysettings->totalNumberOfBanks * _mysettings->totalNumberOfSeriesModules)
    {
      request->send(500, "text/plain", "Wrong parameter bank");
      return;
    }
    else
    {
      _prg->sendIdentifyModuleRequest(c);
      SendSuccess(request);
    }
  }
  else
  {
    request->send(500, "text/plain", "Missing parameters");
  }
}




/*
Restart controller from web interface
*/
void DIYBMSServer::handleRestartController(AsyncWebServerRequest *request)
{
  ESP.restart();
}


void DIYBMSServer::PrintStreamCommaBoolean(AsyncResponseStream *response, const char *text, bool boolean)
{
  response->print(text);
  if (boolean)
  {
    response->print("true");
  }
  else
  {
    response->print("false");
  }
  response->print(',');
}

void DIYBMSServer::PrintStreamCommaFloat(AsyncResponseStream *response, const char *text, float value)
{
  response->print(text);
  //Print value to 6 decimal places
  response->print(value, 6);
  response->print(',');
}

void DIYBMSServer::PrintStreamComma(AsyncResponseStream *response, const char *text, uint32_t value)
{
  response->print(text);
  response->print(value);
  response->print(',');
}

void DIYBMSServer::PrintStreamCommaInt16(AsyncResponseStream *response, const char *text, int16_t value)
{
  response->print(text);
  response->print(value);
  response->print(',');
}

void DIYBMSServer::PrintStream(AsyncResponseStream *response, const char *text, uint32_t value)
{
  response->print(text);
  response->print(value);
}

// Start Web Server (crazy amount of pointer params!)
void DIYBMSServer::StartServer(AsyncWebServer *webserver,
                               diybms_eeprom_settings *mysettings,
                               fs::SDFS *sdcard,
                               PacketRequestGenerator *prg,
                               PacketReceiveProcessor *pktreceiveproc,
                               ControllerState *controlState,
                               Rules *rules,
                               void (*sdcardaction_callback)(uint8_t action),
                               HAL_ESP32 *hal)
{
  _myserver = webserver;
  _hal = hal;
  _prg = prg;
  _controlState = controlState;
  _rules = rules;
  _sdcard = sdcard;
  _mysettings = mysettings;
  _receiveProc = pktreceiveproc;
  _sdcardaction_callback = sdcardaction_callback;

  String cookieValue = "DIYBMS_XSS=";
  cookieValue += DIYBMSServer::UUIDString;
  cookieValue += String("; path=/; HttpOnly");
  DefaultHeaders::Instance().addHeader("Set-Cookie", cookieValue);


  //Read endpoints
 
  
  

  //POST method endpoints


  _myserver->on("/savesetting.json", HTTP_POST, DIYBMSServer::saveSetting);

  
  _myserver->on("/savemqtt.json", HTTP_POST, DIYBMSServer::saveMQTTSetting);
  _myserver->on("/saveinfluxdb.json", HTTP_POST, DIYBMSServer::saveInfluxDBSetting);
  
  _myserver->on("/saverules.json", HTTP_POST, DIYBMSServer::saveRuleConfiguration);
  
  _myserver->on("/savedisplaysetting.json", HTTP_POST, DIYBMSServer::saveDisplaySetting);
  _myserver->on("/savestorage.json", HTTP_POST, DIYBMSServer::saveStorage);

  _myserver->on("/resetcounters.json", HTTP_POST, DIYBMSServer::resetCounters);
  _myserver->on("/restartcontroller.json", HTTP_POST, DIYBMSServer::handleRestartController);

  _myserver->on("/sdmount.json", HTTP_POST, DIYBMSServer::sdMount);
  _myserver->on("/sdunmount.json", HTTP_POST, DIYBMSServer::sdUnmount);

  _myserver->on("/enableavrprog.json", HTTP_POST, DIYBMSServer::enableAVRprog);
  _myserver->on("/disableavrprog.json", HTTP_POST, DIYBMSServer::disableAVRprog);

  _myserver->on("/avrprog.json", HTTP_POST, DIYBMSServer::avrProgrammer);
  _myserver->on("/wificonfigtofile.json", HTTP_POST, DIYBMSServer::saveWifiConfigToSDCard);
  _myserver->on("/saveconfigtofile.json", HTTP_POST, DIYBMSServer::saveConfigurationToSDCard);

  //Current monitor services/settings
  _myserver->on("/savers485settings.json", HTTP_POST, DIYBMSServer::saveRS485Settings);
  _myserver->on("/savecurrentmon.json", HTTP_POST, DIYBMSServer::saveCurrentMonSettings);
  _myserver->on("/savecmbasic.json", HTTP_POST, DIYBMSServer::saveCurrentMonBasic);
  _myserver->on("/savecmadvanced.json", HTTP_POST, DIYBMSServer::saveCurrentMonAdvanced);
  _myserver->on("/savecmrelay.json", HTTP_POST, DIYBMSServer::saveCurrentMonRelay);
  //Victron stuff
  _myserver->on("/savevictron.json", HTTP_POST, DIYBMSServer::saveVictron);

  _myserver->onNotFound(DIYBMSServer::handleNotFound);
  _myserver->begin();

  ESP_LOGI(TAG, "Start Web Server complete");
}
